////////////////////////////////////////////////////////////////////////////
//
// Copyright 2019 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////

import Realm
import Realm.Private

%{
import re

primitive_types = ['Bool', 'Double', 'Float', 'Int', 'Int8', 'Int16', 'Int32', 'Int64']
object_types = ['String', 'Date', 'Data']
def base_type(type):
    return re.sub(r'\d', '', type)
}%

% for type in primitive_types:
extension ${type}: RealmValue {
    @inlinable
    public static func _rlmGetProperty(_ obj: Object, _ key: UInt16) -> ${type} {
        return ${type}(RLMGetSwiftProperty${base_type(type)}(obj, key))
    }
    @inlinable
    public static func _rlmGetPropertyOptional(_ obj: Object, _ key: UInt16) -> ${type}? {
        var gotValue = false
        let ret = ${type}(RLMGetSwiftProperty${base_type(type)}Optional(obj, key, &gotValue))
        return gotValue ? ret : nil
    }
    @inlinable
    public static func _rlmSetProperty(_ obj: Object, _ key: UInt16, _ value: ${type}) {
        RLMSetSwiftProperty${base_type(type)}(obj, key, value)
    }
    @inlinable public static var _type: PropertyType { .${base_type(type).lower()} }
    @inlinable public static var _optional: Bool { false }
}
%end
% for type in object_types:
extension ${type}: RealmValue {
    @inlinable
    public static func _rlmGetProperty(_ obj: Object, _ key: UInt16) -> ${type} {
        return _rlmGetPropertyOptional(obj, key)!
    }
    @inlinable
    public static func _rlmGetPropertyOptional(_ obj: Object, _ key: UInt16) -> ${type}? {
        return ${type}(RLMGetSwiftProperty${base_type(type)}(obj, key))
    }
    @inlinable
    public static func _rlmSetProperty(_ obj: Object, _ key: UInt16, _ value: ${type}) {
        RLMSetSwiftProperty${base_type(type)}(obj, key, value)
    }
    @inlinable public static var _type: PropertyType { .${base_type(type).lower()} }
    @inlinable public static var _optional: Bool { false }
}
%end

